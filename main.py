import os
from dataclasses import dataclass

import telebot
from dotenv import load_dotenv
from telebot import types

from alco_logic import drink_timer, next_drink_day
from database import get_initialization, get_user, update_user
from services import get_right_ending

load_dotenv()

bot = telebot.TeleBot(os.getenv("TELEGRAM_KEY"))


HELP_TEXT = "/help \n/drank \n/rules \n/info"
RULES = (
    "1) –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: 1 –¥–µ–Ω—å —à—Ç—Ä–∞—Ñ–∞, +1 –¥–µ–Ω—å –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏—ë–º –∞–ª–∫–æ–≥–æ–ª—è."
    "\n2) –°—É—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞–∏–º–µ–Ω—å—à–∏–π"
    " –æ–±—â–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –≥–æ–¥, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–æ–≤—ã–π –≥–æ–¥ - –Ω–æ–≤–∞—è –∂–∏–∑–Ω—å, –∏ —à—Ç—Ä–∞—Ñ –æ–±–Ω—É–ª—è–µ—Ç—Å—è."
    "\n3) –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ –æ–∂–∏–¥–∞–µ—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–∏—Ç—å, "
    "—Ç–æ —Ç—ã –ø—å–µ—à—å 1+2+3+4..., –≥–¥–µ –∫–∞–∂–¥–∞—è —Ü–∏—Ñ—Ä–∞ –º–µ–∂–¥—É –ø–ª—é—Å–∞–º–∏ –æ–∑–Ω–∞—á–∞–µ—Ç "
    "—Ç–≤–æ–π –æ–±—ã–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è–º–∏ –∞–ª–∫–æ–≥–æ–ª—è."
    "\n4) –ï—Å–ª–∏ –Ω–∞—Ä—É—à–∞–µ—à—å –≥—Ä–∞—Ñ–∏–∫, —Ç–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã. "
    "–ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—É—â–∏–π —à—Ç—Ä–∞—Ñ 5 –¥–Ω–µ–π, –Ω–æ —É–∂–µ —á–µ—Ä–µ–∑ 2 –ø–æ–ª–Ω—ã—Ö –¥–Ω—è –±—ã–ª –∞–ª–∫–æ–≥–æ–ª—å. –®—Ç—Ä–∞—Ñ "
    "—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 5+2( —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º 3-–µ–≥–æ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ –¥–Ω—è –≤ –ø–æ–ª—å–∑—É —É—á–∞—Å—Ç–Ω–∏–∫–∞. )"
    "–ü—Ä–∏ —ç—Ç–æ–º –±—É–¥—É—â–∏–µ —à—Ç—Ä–∞—Ñ—ã —Ä–∞—Å—Ç—É—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ, –Ω–æ –ø–∞—É–∑–∞ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±—É–¥–µ—Ç –¥–æ–ª—å—à–µ."
    "\n5) –ë–æ–Ω—É—Å—ã. –ï—Å–ª–∏ —Ç—ã –≤—ã–¥–µ—Ä–∂–∞–ª –ø—Ä–∏ —à—Ç—Ä–∞—Ñ–µ –≤ 5 –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –∏ –±–æ–ª—å—à–µ, "
    "—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —à—Ç—Ä–∞—Ñ. "
    "–¢—ã –≤—Å—ë —Ç–∞–∫ –∂–µ —Ç—Ä–µ–∑–≤ –¥–ª—è –±–æ—Ç–∞, –Ω–æ —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–π "
    "—Ç–∞–∫–æ–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —É–∂–µ —á–µ—Ä–µ–∑ 20 –¥–Ω–µ–π ( 5, 10, 20, 40 –∏ —Ç–¥), –∞ —Ä–∞–Ω–Ω–µ–µ –≤—ã–ø–∏–≤–∞–Ω–∏–µ "
    "–¥–∞—ë—Ç –æ–±—ã—á–Ω—ã–π —à—Ç—Ä–∞—Ñ."
    "\n6) –ü–µ—Ä–∏–æ–¥ –≤—ã–ø–∏–≤–∞–Ω–∏—è ( 1 —Ä–∞–∑) –¥–ª—è –±–æ—Ç–∞ 24 —á–∞—Å–∞."
)


@dataclass
class Message:
    text: str

    def __init__(self, text):
        self.text = text


@bot.message_handler(
    commands=[
        "start",
    ]
)
def message_handler_start(message):
    button_drank = types.InlineKeyboardButton("ü•¥–í–´–ü–ò–õ!", callback_data="–í–´–ü–ò–õ!")
    button_rules = types.InlineKeyboardButton("ü§ñ–ü—Ä–∞–≤–∏–ª–∞", callback_data="–ü—Ä–∞–≤–∏–ª–∞")
    button_help = types.InlineKeyboardButton("üÜò–ü–æ–º–æ—â—å", callback_data="–ü–æ–º–æ—â—å")
    button_info = types.InlineKeyboardButton("üü¢–û–±–æ –º–Ω–µ", callback_data="–ò–Ω—Ñ–æ")

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(button_info)
    keyboard.add(button_drank)
    keyboard.add(button_rules)
    keyboard.add(button_help)

    get_initialization(message.from_user.username, message.from_user.first_name)
    bot.send_message(
        message.chat.id,
        f"{message.from_user.first_name}, "
        "—Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–ª–∫–æ–±–æ—Ç! "
        "–°–æ –º–Ω–æ–π —Ç—ã –±—Ä–æ—Å–∏—à—å –ø–∏—Ç—å =)",
        reply_markup=keyboard,
    )


def message_handler_rules_drank_help(message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    rule_list = ["–ü—Ä–∞–≤–∏–ª–∞", "/rules"]
    drank_list = ["–í–´–ü–ò–õ!", "/drank"]
    help_list = ["–ü–æ–º–æ—â—å", "/help"]
    info_list = ["–ò–Ω—Ñ–æ", "/info"]

    if message.data in info_list:
        user = get_user(message.from_user.username)
        current_penalty = user[3]
        last_drank = user[5]
        next_day = next_drink_day(
            last_drank=last_drank, current_penalty=current_penalty - 1
        )
        clear_time = get_right_ending(days=current_penalty - 1)
        wait_time = get_right_ending(days=current_penalty)
        time_check = drink_timer(last_drank)

        bot.send_message(
            message.from_user.id,
            f'\n–¢–µ–∫—É—â–∏–π —à—Ç—Ä–∞—Ñ {clear_time or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}.'
            f'\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º–æ–∂–Ω–æ –≤—ã–ø–∏—Ç—å {next_day or "—Å–µ–π—á–∞—Å"}.'
            f"\n–°–ª–µ–¥—É—é—â–∏–π —à—Ç—Ä–∞—Ñ {wait_time}."
            f'\n–û—Å—Ç–∞—Ç–æ–∫ —Ç–∞–π–º–µ—Ä–∞ {time_check[0] or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}.',
        )

    if message.data in rule_list:
        bot.send_message(message.from_user.id, f"–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: \n{RULES}")

    elif message.data in drank_list:
        user = get_user(message.from_user.username)
        last_drank = user[5]  # last_drank
        time_check = drink_timer(last_drank)

        if time_check[1]:  # True / False
            update_user(message.from_user.username)
            user = get_user(message.from_user.username)
            last_drank = user[5]  # last_drank
            current_penalty = user[3]  # current_penalty

            time_check = drink_timer(last_drank)
            next_day = next_drink_day(
                last_drank=last_drank, current_penalty=current_penalty - 1
            )
            clear_time = get_right_ending(days=(current_penalty - 1))
            wait_time = get_right_ending(days=current_penalty)

            bot.send_message(
                message.from_user.id,
                "–ù–µ–ø–ª–æ—Ö–æ, —Ç–æ–≥–¥–∞ —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è, " "–∞ —è –ø–æ—Å—Ç–∞–≤–∏–ª —Ç–µ–±–µ —Ç–∞–π–º–µ—Ä –Ω–∞ 24 —á–∞—Å–∞!",
            )

            bot.send_message(
                message.from_user.id,
                f"\n–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {clear_time}."
                f"\n–ú–æ–∂–Ω–æ –≤—ã–ø–∏—Ç—å {next_day}."
                f"\n–°–ª–µ–¥—É—é—â–∏–π —à—Ç—Ä–∞—Ñ {wait_time}."
                f"\n–û—Å—Ç–∞—Ç–æ–∫ —Ç–∞–π–º–µ—Ä–∞ {time_check[0]}.",
            )
        else:
            bot.send_message(
                message.from_user.id,
                "–¢–∞–π–º–µ—Ä —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!" f"\n–û—Å—Ç–∞–ª–æ—Å—å {time_check[0]}.",
            )

    elif message.data in help_list:
        bot.send_message(message.from_user.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n" f"{HELP_TEXT}")


@bot.message_handler(commands=["help", "rules", "drank", "info"])
def command_handler(message):
    """
    –î—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª message_handler_rules_drank_help –¥–ª—è –∫–æ–º–∞–Ω–¥,
    –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
    """
    if message.text == "/info":
        user = get_user(message.from_user.username)
        current_penalty = user[3]
        last_drank = user[5]
        next_day = next_drink_day(
            last_drank=last_drank, current_penalty=current_penalty - 1
        )
        clear_time = get_right_ending(days=current_penalty - 1)
        wait_time = get_right_ending(days=current_penalty)
        time_check = drink_timer(last_drank)

        bot.send_message(
            message.from_user.id,
            f'\n–¢–µ–∫—É—â–∏–π —à—Ç—Ä–∞—Ñ {clear_time or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}.'
            f'\n–ú–æ–∂–Ω–æ –≤—ã–ø–∏—Ç—å {next_day or "—Å–µ–π—á–∞—Å"}.'
            f"\n–°–ª–µ–¥—É—é—â–∏–π —à—Ç—Ä–∞—Ñ {wait_time}."
            f'\n–û—Å—Ç–∞—Ç–æ–∫ —Ç–∞–π–º–µ—Ä–∞ {time_check[0] or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}.',
        )
    elif message.text == "/help":
        bot.send_message(message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n" f"{HELP_TEXT}")
    elif message.text == "/rules":
        bot.send_message(message.chat.id, f"{RULES}")

    elif message.text == "/drank":
        user = get_user(message.from_user.username)
        last_drank = user[5]  # last_drank
        time_check = drink_timer(last_drank)

        if time_check[1]:  # True / False
            update_user(message.from_user.username)
            user = get_user(message.from_user.username)
            last_drank = user[5]  # last_drank
            time_check = drink_timer(last_drank)
            current_penalty = user[3]  # current_penalty
            next_day = next_drink_day(
                last_drank=last_drank, current_penalty=current_penalty - 1
            )
            clear_time = get_right_ending(days=(current_penalty - 1))
            wait_time = get_right_ending(days=current_penalty)

            bot.send_message(
                message.from_user.id,
                "–ù–µ–ø–ª–æ—Ö–æ, —Ç–æ–≥–¥–∞ —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è, " "–∞ —è –ø–æ—Å—Ç–∞–≤–∏–ª —Ç–µ–±–µ —Ç–∞–π–º–µ—Ä –Ω–∞ 24 —á–∞—Å–∞!",
            )

            bot.send_message(
                message.from_user.id,
                f"\n–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {clear_time}."
                f"\n–ú–æ–∂–Ω–æ –≤—ã–ø–∏—Ç—å {next_day}."
                f"\n–°–ª–µ–¥—É—é—â–∏–π —à—Ç—Ä–∞—Ñ {wait_time}."
                f"\n–û—Å—Ç–∞—Ç–æ–∫ —Ç–∞–π–º–µ—Ä–∞: {time_check[0]}.",
            )
        else:
            bot.send_message(
                message.from_user.id,
                "–¢–∞–π–º–µ—Ä —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!" f"\n–û—Å—Ç–∞–ª–æ—Å—å {time_check[0]}.",
            )


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ callback –¥–ª—è –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    if call.data == "–ò–Ω—Ñ–æ":
        message_handler_rules_drank_help(message=call)
    elif call.data == "–í–´–ü–ò–õ!":
        message_handler_rules_drank_help(message=call)
    elif call.data == "–ü–æ–º–æ—â—å":
        bot.send_message(call.message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n" f"{HELP_TEXT}")
    elif call.data == "–ü—Ä–∞–≤–∏–ª–∞":
        bot.send_message(call.message.chat.id, f"{RULES}")


bot.polling(non_stop=True)
